/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ir.ac.kntu.orm;

import ir.ac.kntu.orm.mapping.annotations.ID;
import ir.ac.kntu.orm.mapping.annotations.Property;
import ir.ac.kntu.orm.mapping.annotations.Relation;
import ir.ac.kntu.orm.model.ModelFactory;
import ir.ac.kntu.orm.repo.annotations.Query;
import ir.ac.kntu.orm.tx.annotations.Transactional;

import java.io.Serializable;
import java.lang.reflect.*;
import java.util.*;

class Book {
    private String title;
    @Relation(type= Relation.Type.ManyToOne, name="author")
    private Persong author;
}

class Persong {
    private Integer id;

    @Relation(type= Relation.Type.OneToMany, name="author")
    private List<Book> booksBa;

    private String name;

    public Persong() {
    }

    public Persong(Integer id, String name) {
        this.id = id;
        this.name = name;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setBooksBa(List<Book> booksBa) {
        this.booksBa = booksBa;
        System.out.println("setBooksBa");
    }

    public List<Book> getBooksBa() {
        return booksBa;
    }
}
//
//class QueryCompiler {
//    private String getTableName(Class<?> clazz) {
//        return clazz.getSimpleName();
//    }
//
//    private String[] getFields(Class<?> clazz) {
//        return Arrays.stream(clazz.getDeclaredMethods())
//                .filter(method -> method.getName().startsWith("get"))
//                .filter(method -> method.isAnnotationPresent(Column.class))
//                .map(Method::getName)
//                .map(methodName -> methodName.substring(3))
//                .toArray(String[]::new);
//    }
//}

class Contest {
    @ID
    @Property
    private Integer id;
    @Property
    private String name;
    @Relation(type= Relation.Type.OneToMany, name="origin")
    private List<Problem> problems;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

class Problem {
    @ID
    @Relation(type= Relation.Type.ManyToOne, name="origin")
    private Contest contest;
    @ID
    @Property
    private Integer number;
    @Property
    private String title;

    public Contest getContest() {
        return contest;
    }

    public void setContest(Contest contest) {
        this.contest = contest;
    }

    public Integer getNumber() {
        return number;
    }

    public void setNumber(Integer number) {
        this.number = number;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }
}

interface Service<Entity, ID extends Serializable> {

    @Transactional
    Optional<Entity> findById(ID id);

    @Transactional
    List<Entity> findAll();

    void save(Entity entity);

    void delete(Entity entity);
}

class TransactionHandler implements InvocationHandler {

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        Object ret = method.invoke(proxy, args);
        return ret;
    }

}

class RepositoryHandler implements InvocationHandler {

    // Cache the queries
    private Map<Method, String> queries;

    private String[] getTokens(String s) {
        return s.split("(?<!(^|[A-Z]))(?=[A-Z])|(?<!^)(?=[A-Z][a-z])");
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        String[] tokens = getTokens(method.getName());
        System.out.println("Invoking " + method.getName());
        Query query = method.getAnnotation(Query.class);
        if (query != null) {
            System.out.println("Query: " + query.value());
        }
        switch (tokens[0]) {
            case "find":
                if (tokens[1].equals("All")) {
                    return Collections.emptyList();
                }
                return Optional.empty();
            case "delete":
            case "update":
            case "save":
                return null;
        }
        return null;
    }
}

class LazyLoader implements InvocationHandler {

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println("Invoking " + method.getName());
        return method.invoke(proxy, args);
    }
}

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    @SuppressWarnings("unchecked")
//    public static <E, I extends Serializable, R extends Repository<E, I>> R getProxy(Class<? extends R> repositoryClass) {
//        return (R) Proxy.newProxyInstance(
//                repositoryClass.getClassLoader(),
//                new Class[]{repositoryClass},
//                new RepositoryHandler()
//        );
//    }
    public static void main(String[] args) throws Throwable {
//        ProxyFactory factory = new ProxyFactory();
//        factory.setSuperclass(Person.class);
//        factory.setFilter(new MethodFilter() {
//            @Override
//            public boolean isHandled(Method m) {
//                return m.getName().startsWith("get");
//            }
//        });
//
//        MethodHandler handler = new MethodHandler() {
//            @Override
//            public Object invoke(Object self, Method thisMethod, Method proceed, Object[] args) throws Throwable {
//                System.out.println("Invoking " + thisMethod.getName());
//                return proceed.invoke(self, args);
//            }
//        };

//        ArrayList<Person> people = new ArrayList<>();
//
//        long time = System.currentTimeMillis();
//
//        for (int i = 0; i < 100; i++) {
//            people.add((Person) factory.create(new Class<?>[0], new Object[0], handler));
//        }
//
//        System.out.println("Time: " + (System.currentTimeMillis() - time));
//
//        ArrayList<Person> people2 = new ArrayList<>();
//
//        time = System.currentTimeMillis();
//
//        for (int i = 0; i < 100; i++) {
//            people2.add(new Person());
//        }
//
//        System.out.println("Time: " + (System.currentTimeMillis() - time));
//
//
//        Person person = (Person) factory.create(new Class<?>[0], new Object[0], handler);
//
//        person.setName("John");
//        person.setId(1);
//
//        Class<? extends Person> personClazz = new ByteBuddy()
//                .subclass(Person.class)
//                .method(ElementMatchers.nameStartsWith("get"))
//                .intercept(InvocationHandlerAdapter.of(new LazyLoader()))
//                .make()
//                .load(Person.class.getClassLoader())
//                .getLoaded();

//        Person person = personClazz.getConstructor().newInstance();
        
        Persong p = new Persong();

//        System.out.println("***");
//        System.out.println(person.getName());
//        System.out.println(person.getId());
//        System.out.println("***");

//        Field f = Person.class.getDeclaredField("books");
//        f.setAccessible(true);
//        Type type = ((ParameterizedType) f.getGenericType()).getActualTypeArguments()[0];
//        System.out.println("mother fucker :) " + ((Class<?>) type));
//
//        PersonRepository repository = getProxy(PersonRepository.class);
//        System.out.println(repository.findById(1));
//        System.out.println(repository.findAll());
//        repository.save(new Person(1, "John"));
//        repository.delete(new Person(1, "John"));
//        repository.findByName("John");
//        repository.customQuery("John");

        ModelFactory<Persong> factory = ModelFactory.getFactory(Persong.class);

        Persong persong = factory.create();

        persong.getName();

        persong.getName();

        persong.getId();

        persong.setId(55);

        System.out.println(persong.getBooksBa());

        persong.getBooksBa();

        System.out.println(persong.getBooksBa());

        persong.getId();


    }
}
