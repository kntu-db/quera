package ir.ac.kntu.orm.mapping.meta;

import io.vavr.control.Try;
import ir.ac.kntu.orm.mapping.PreparedMapping;

import javax.sql.DataSource;
import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class EntityManager {
    private final Map<?, EntityMetaInf<?>> entityMetaInfMap;

    private final DataSource dataSource;

    /**
     * Reads the file in META-INF/orm-entities.inf
     * the file contains the fully qualified class names of all entities that are mapped to the database
     * this file is generated by the orm annotation processor automatically.
     */
    public EntityManager(DataSource dataSource) {
        this.dataSource = dataSource;
        try (Stream<String> stream = Files.lines(Path.of(ClassLoader.getSystemResource("META-INF/orm-entities.inf").toURI()))) {
            entityMetaInfMap = stream.map(line -> Try.of(() -> Class.forName(line)))
                    .map(Try::get)
                    .map(clazz -> (Class<?>) clazz)
                    .map(EntityMetaInf::new)
                    .collect(Collectors.toMap(EntityMetaInf::getEntityClass, entityMetaInf -> entityMetaInf));
        } catch (IOException e) {
            throw new RuntimeException("Could not read META-INF/orm-entities.inf", e);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

    public DataSource getDataSource() {
        return dataSource;
    }

    @SuppressWarnings("unchecked")
    public <E> EntityMetaInf<E> getEntityMetaInf(Class<E> entityClass) {
        return (EntityMetaInf<E>) entityMetaInfMap.get(entityClass);
    }

    public <E> PreparedMapping<E> prepareMapping(Class<E> entityClass, String alias) {
        return new PreparedMapping<>(this, entityClass, alias);
    }
}
